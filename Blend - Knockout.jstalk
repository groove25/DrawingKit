// Blend - Knockout
// v.03h
// This command offers a quick way to achieve a "knockout" effect, where the opacity of the selected layer(s) knocks out all underlying layers—an effect that can be particularly useful for text.
// To constrain the knockout's depth, hold the Option key while running the command; this applies a mask blend to the parent group—if one exists—which limits the effect to the group itself. Alternatively, a "transparency knockout" can be created by holding the Shift key while running the command; in this case, any transparency within the selected layer(s) will knock out the underlying layers—basically, the reverse of an opacity knockout. (Be aware that a fully opaque object will disappear when a transparency knockout is applied.)
// Note that these knockout effects may temporarily disable the blend mode menu for any object to which they are applied; running the command a second time will turn off the effect and restore any disabled blend mode options. (The Blend - Forward and Blend - Backward commands may also be used to access these blend modes.)

// NOTE: A side effect of constraining knockout is that the group itself may appear clipped by underlying layers. Sorry! It's an imperfect system.

// Copyright (c) 2013–14 Doug Downing. All rights reserved.
// Email: drawingkit@dougdowning.com // Website: www.dougdowning.com


// USER VARIABLES

var tooltip = true;
var label = true;

// SCRIPT STARTS HERE

// Modifier keys ++++++++++++++++++

var modFlagOption = Math.pow(2,19);
var modFlagShift  = Math.pow(2,17);
var modFlags = [NSEvent modifierFlags];
var modifier, constrain, transparency;
if (modFlags & modFlagOption) {transparency = true; modifier = "opt"}
if (modFlags & modFlagShift) {constrain = true; modifier = "shift"}

// Labels +++++++++++++++++++++++++++
// Labels help to affirm that an effect has been applied when the results on canvas are nonexistent or unexpected, to identify an effect when revisiting a document, and to preserve non-constraining masks applied to groups.
// KO = Knockout, TKO = Transparency Knockout, M = Mask, C = Constrain (w/mask), RM = Reverse mask // Unicode characters: ⬚ dotted square, ▣ white square containing small black square, ◉ fisheye, ￭ halfwidth black square

var KO = " - KO";
var TKO = " - TKO";
var M = " - M";
var C = " *";
var RM = " - RM";

var symbols = new Array(KO, TKO, M, C, RM);
var effects = new Array(KO, TKO, M, RM);

// Set transparency knockout, toggle knockouts &/or constraint ++++++++

if (selection != null && selection.count() > 0 && selection[0].className() != "MSSliceLayer") {

for (var i=0; i<selection.count(); i++) {

	var currentBlend = selection[i].style().contextSettings().blendMode();
	var parent = selection[i].parentGroup();
	var parentBlend = parent.style().contextSettings().blendMode();

	// Remove labels +++++++++++++++++++

	if (label == true) {
		var name = selection[i].name();
		var parentName = parent.name();

		if (selection[i].className() != "MSArtboardGroup") {
			for (var j=0; j<symbols.length; j++) {
				var suffixIndex = name.lastIndexOf(symbols[j]);
				if (suffixIndex > -1 
				&& suffixIndex == name.length() - symbols[j].length) {
					selection[i].setName(name.slice(0, suffixIndex));
				}
			}
		}
		if (parent.className() == "MSLayerGroup") {
			// If found, remove constrain symbol (*) from parent
			var parentSuffixIndexC = parentName.lastIndexOf(C);
			if (parentSuffixIndexC > -1 
				&& parentSuffixIndexC == parentName.length() - C.length) {
				parent.setName(parentName.slice(0, parentSuffixIndexC));
			}
			// Or if constrain is true, remove effect symbol from parent
			else if (constrain == true) { 
				for (var k=0; k<effects.length; k++) {
					var parentSuffixIndex = parentName.lastIndexOf(effects[k]);
					if (parentSuffixIndex > -1 && parentSuffixIndex == parentName.length() - effects[k].length) {
						parent.setName(parentName.slice(0, parentSuffixIndex));
					}
				}
			}
		}
	}

	// Set blends +++++++++++++++++++++

	// 21 = Destination Out ("knockout")
	// 20 = Destination In ("transparency knockout")
	// 18 = Source Atop ("constrain" or "mask")

	if (selection[i].className() != "MSArtboardGroup") {
		if (transparency == true) {
			selection[i].style().contextSettings().setBlendMode(20);
		}
		else if ((currentBlend == 21|| currentBlend == 20) 
		&& (constrain != true)) {
			selection[i].style().contextSettings().setBlendMode(0);
		}
		else {
			selection[i].style().contextSettings().setBlendMode(21);
		}
	}
	if (parent.className() == "MSLayerGroup") {
		if (constrain == true) {
			parent.style().contextSettings().setBlendMode(18);
		}
		else if (parentBlend == 18) {
			parent.style().contextSettings().setBlendMode(0);
		}
		// If label ends in the mask symbol, reset mask blend mode
		if (label == true && parent.name().lastIndexOf(M) > -1 
		&& parent.name().lastIndexOf(M) == parent.name().length() - M.length) {
			parent.style().contextSettings().setBlendMode(18);
		}
	}

	// Add labels +++++++++++++++++++++++++++

	if (label == true) {

		if (selection[i].className() != "MSArtboardGroup") {
			var newBlend = selection[i].style().contextSettings().blendMode();
			if (newBlend == 20) {selection[i].setName(selection[i].name() + TKO)}
			else if (newBlend == 21) {selection[i].setName(selection[i].name() + KO)}
		}
		if (parent.className() == "MSLayerGroup") {
			var newParentBlend = parent.style().contextSettings().blendMode();
			// lastIndexOf(C) is necessary for looped selection
			// lastIndexOf(M) prevents "*" being added to "M"
			if (newParentBlend == 18 
					&& parent.name().lastIndexOf(M) == -1
					&& parent.name().lastIndexOf(C) == -1) {
				parent.setName(parent.name() + C);
			}
		}
	}

}

// Tooltips & messages +++++++++++++++++++++++++

// Do not show tooltip if knockout has just been toggled off.
function testForKnockout() {
	for (var i=0; i<selection.count(); i++) {
		if (selection[i].style().contextSettings().blendMode() == 21) {
			return true
		}
	}
}
if (tooltip == true && modifier == undefined && testForKnockout() == true) {
	doc.showMessage("Shift (⇧): Constrain to Group    Option (⌥): Transparency Knockout");
}

// If constrain was chosen but no parent group exists, let them know.
function testForGroup() {
	for (var i=0; i<selection.count(); i++) {
		if (selection[i].parentGroup().className() == "MSLayerGroup") {
			return true
		}
	}
}
if (constrain == true && testForGroup() != true) {
	doc.showMessage("To constrain this knockout, you must create a group.");
}


} // end "if selection" criteria ++++++++++++++++++

else if (selection != null && selection.count() > 0 && selection[0].className() == "MSSliceLayer") {
	//doc.showMessage("This effect does not apply to slices.");
}

else {
	doc.showMessage("This command requires a selection.");
}

// NOTES
// Thanks to Jeff Biggus (HyperJeff, Inc.) for help with modifier keys!

// This script is not to be distributed, shared, modified, etc. without written permission of the author. (See copyright notice above.)
// The script is provided “as is", to be used at your own risk, with no warranties of any kind, whether expressed or implied. Under no circumstances shall the author be liable for direct, indirect, special, incidental, or consequential damages resulting from the use, misuse, or inability to use this script.

// ---------------------------------------------------------------