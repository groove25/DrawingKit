// Match Size
// v.03h
// This command resizes selected layers or groups to match a key object within the selection. The key object is designated by its position in the selection's layer stack, from the bottom upwards: 1, 2, 3, etc. (If no object is specified, the bottom layer in the selection becomes the key object.) To match width or height only, add W or H to the input.
// This script is ideal for a series of similar items such as inserted bitmaps. Once the first bitmap has been resized, the remaining bitmaps can be sized very quickly. Note, however, that a bitmap's original proportions will typically be maintained when resizing. In such cases, add W or H to specify which dimension you wish to match. (When resizing along a single dimension using W or H, holding the Shift key will ensure that *all* objects maintain their original proportions—including those whose proportions are unlocked.)
// By default, this command also matches rotation. This can be disabled by holding the Option key when choosing the command, or by changing a preference within the script.
// NEW: An object may now be quickly resized to its artboard (or vice versa). Simply select the object and run the command. Enter 'artboard' to match to the artboard's size, or 'object' to match to the object's size.

// Copyright (c) 2013–14 Doug Downing. All rights reserved.
// Email: drawingkit@dougdowning.com // Website: www.dougdowning.com


// USER VARIABLES
// When a text object is matched, the resulting frame is often too large or too small for the text, and in some cases, the command will appear to have had no effect. As an alternative to this, the font size of the text can be adjusted to match the height of the key object, by setting ‘matchFontSize’ to true.

var rotate = true;				// To match rotation, set to true
var matchFontSize = true;		// For text objects
var tooltip = true;

// SCRIPT STARTS HERE

if (selection != null && selection.count() >=2) {

	// Modifier keys +++++++++++++++
	// Option: Rotation; Shift: Constrain
	var modFlagOption  = Math.pow(2,19);
	var modFlagShift   = Math.pow(2,17);
	var modFlags = [NSEvent modifierFlags];
	var modifier, constrain;
	if (modFlags & modFlagOption) {modifier = "opt"; rotate = !rotate;}
	if (modFlags & modFlagShift) {modifier = "shift"; constrain = true;}
	if ((modFlags & modFlagOption) && (modFlags & modFlagShift)) {modifier = "both"}

	// Parsing input ++++++++++++++++++
	var nonTextObjects = new Array();
	for (var i=0; i<selection.count(); i++) {
		if (selection[i].className() != "MSTextLayer") {
			nonTextObjects.push(selection[i]);
		}
	}
	var input;
	if (nonTextObjects.length == 0 && matchFontSize == true) {
		input = [doc askForUserInput:"Specify layer number." initialValue:"1"]
	}
	else {
		input = [doc askForUserInput:"Specify layer number. Add W or H to limit (optional)." initialValue:"1"]
	}
	// Test first and last character (isNaN = letter) and slice string
	var letter, number;
	if (isNaN(input.charAt(0)) == true) {
		letter = input.slice(0,1).toUpperCase(); // 1st character
		number = input.slice(1); // remaining characters
		}
	else if (isNaN(input.charAt(input.length()-1)) == true) {
		letter = input.slice(-1).toUpperCase(); // last character
		number = input.slice(0, input.length()-1); // remaining characters
		}
	else {
		number = input;
	}
	// Align: Compare to array, set to H as default backup
	//var dimension = letter.toUpperCase();
	//var dimensionValues = new Array('W','H');
	//if (dimensionValues.indexOf(align) == -1) {dimension = "W";}

	// Key object: Fix index #, set to 0 as backup (for NaN or 0 input)
	var keyIndex = number - 1;
	if (isNaN(keyIndex) == true || keyIndex < 0) {keyIndex = 0;}
	else if (keyIndex > selection.count()-1) {keyIndex = selection.count()-1;}
	var keyObj = selection[keyIndex];

	// Find dimensions +++++++++++++
	//var keyObj = selection[keyIndex];
	var keyWidth = selection[keyIndex].frame().width();
	var keyHeight = selection[keyIndex].frame().height();
	var keyDeg = selection[keyIndex].rotation();

	// Set dimensions +++++++++++++++++++
	var unlocked = new Array(); // For constrain tooltip
	for (var i=0; i<selection.count(); i++) {
		if (selection[i] == keyObj) continue; // avoid resizing target
		
		// Text frames do not affect text size; adjust font size instead
		if (selection[i].className() == "MSTextLayer" & matchFontSize == true) {
			if (keyObj.className() == "MSTextLayer") {
				selection[i].setFontSize(keyObj.fontSize());
			}
			else {
				selection[i].setFontSize(keyHeight);
			}
		}
		// For all other objects
		else {
			// Constrain if Shift key + W or H input
			var lockStatus = selection[i].frame().constrainProportions();
			// For constrain tooltip (instead of letter only)
			if (letter != null && lockStatus == false) {
				unlocked.push(selection[i]);
			}
			if (letter != null && constrain == true) {
				selection[i].frame().setConstrainProportions(true);
			}
			if (letter == null || letter !="H") {
				selection[i].frame().setWidth(keyWidth);
			}
			if (letter == null || letter !="W") {
				selection[i].frame().setHeight(keyHeight);
			}
			// Restore previous lock status
			if (letter != null && constrain == true && lockStatus == false) {
				selection[i].frame().setConstrainProportions(false);
			} 
		}
	}

	// Check angles ++++++++++
	var angles = new Array();
	for (var i=0; i<selection.count(); i++) {
		var deg = selection[i].rotation();
		if (deg != keyDeg) {
			angles.push(deg);
		}
	}

	// Match rotation ++++++++++
	if (rotate == true) {
		for (var i=0; i<selection.count(); i++) {
			if (selection[i] == keyObj) continue;
			selection[i].setRotation(keyDeg);
		}
	}

	// Tooltips +++++
	if (tooltip == true)  {
		if (modifier == undefined && angles.length > 0 && unlocked.length >=1) {
			if (rotate == true) {
				doc.showMessage("Shift (⇧): Constrain proportions     Option (⌥): Disable rotation");
			}
			else {
				doc.showMessage("Shift (⇧): Constrain proportions     Option (⌥): Match rotation");
			}
		}
		else if (modifier != "opt" && modifier != "both" && angles.length > 0) {
			if (rotate == true) {
				doc.showMessage("Option (⌥): Disable rotation");
			}
			else {
				doc.showMessage("Option (⌥): Match rotation");
			}
		}
		else if (modifier != "shift" && modifier != "both" && unlocked.length >=1) {
			doc.showMessage("Shift (⇧): Constrain proportions");
		}
	}

} // end (if selection.count() >=2)

else if (selection.count() == 1 && doc.currentPage().currentArtboard() != null && selection[0].className() != "MSArtboardGroup") {

	var input = doc.askForUserInput_initialValue("Match to ‘object’ or ‘artboard’ as key object.", "artboard");
	// Parse input to accept cases and 'obj, ob, o' or 'art, a', etc.
	input = input.slice(0,1).toLowerCase(); // 1st character, lowercase
	if (input == "a") {input = "artboard";}
	if (input == "o") {input = "object";}

	var keyWidth, keyHeight;
	if (input == "artboard") {
		keyWidth = doc.currentPage().currentArtboard().frame().width();
		keyHeight = doc.currentPage().currentArtboard().frame().height();

		// Adjust frame for non-rotated objects
		if (selection[0].rotation() == 0) {
			selection[0].frame().setWidth(keyWidth);
			selection[0].frame().setHeight(keyHeight);
		}
		// Adjust absoluteRect for rotated objects
		else {
			// Setting width + height here is tricky; a 'while' loop never ends
			// Loop 10x: an arbitrary amount but seems to work well
			for (var i=0; i<10; i++) {
				selection[0].absoluteRect().setWidth(keyWidth);
				selection[0].absoluteRect().setHeight(keyHeight);
			}
		}

		// Reposition selection at 0,0 (again using absoluteRect)
		selection[0].absoluteRect().setRulerX(0);
		selection[0].absoluteRect().setRulerY(0);
	}
	if (input == "object") {
		// Use absoluteRect in case of object rotation
		keyWidth = selection[0].absoluteRect().width();
		keyHeight = selection[0].absoluteRect().height();
		// Apply to artboard frame
		doc.currentPage().currentArtboard().frame().setWidth(keyWidth);
		doc.currentPage().currentArtboard().frame().setHeight(keyHeight);
		// Reposition selection at 0,0 (again using absoluteRect)
		selection[0].absoluteRect().setRulerX(0);
		selection[0].absoluteRect().setRulerY(0);
	}
}

else if (selection.count() == 1 && selection[0].className() == "MSArtboardGroup") {

	var artboard = selection[0];

	// Find boundaries of artboard content
	var artLayers = artboard.layers();
	var minXs = new Array(); 
	var maxXs = new Array();
	var minYs = new Array();
	var maxYs = new Array();

	for (var i=0; i<artLayers.count(); i++) {
		var rect = artLayers.objectAtIndex(i).absoluteRect();
		minXs.push(rect.rulerX());
		maxXs.push(rect.rulerX() + rect.width());
		minYs.push(rect.rulerY());
		maxYs.push(rect.rulerY() + rect.height());
	}
	var x1 = Math.min.apply(Math, minXs);
	var x2 = Math.max.apply(Math, maxXs);
	var y1 = Math.min.apply(Math, minYs);
	var y2 = Math.max.apply(Math, maxYs);

	// Find width + height
	var contentWidth = x2 - x1;
	var contentHeight = y2 - y1;

	// Resize artboard
	artboard.frame().setWidth(contentWidth);
	artboard.frame().setHeight(contentHeight);

	// Reposition content
	for (var i=0; i<artLayers.count(); i++) {
		var objectX = artLayers.objectAtIndex(i).absoluteRect().rulerX();
		var objectY = artLayers.objectAtIndex(i).absoluteRect().rulerY();
		artLayers.objectAtIndex(i).absoluteRect().setRulerX(objectX - x1);
		artLayers.objectAtIndex(i).absoluteRect().setRulerY(objectY - y1);
	}

	// Reposition existing guides
	var xGuides = artboard.horizontalRulerData().numberOfGuides();
	if (xGuides > 0) {
		var xValues = new Array();
		for (var i=0; i<xGuides; i++) {
			var x = artboard.horizontalRulerData().guideAtIndex(0);
			artboard.horizontalRulerData().removeGuideAtIndex(0);
			xValues.push(x - x1);
		}
		for (var i=0; i<xValues.length; i++) {
			artboard.horizontalRulerData().addGuideWithValue(xValues[i]);
		}
	}
	var yGuides = artboard.verticalRulerData().numberOfGuides();
	if (yGuides > 0) {
		var yValues = new Array();
		for (var i=0; i<yGuides; i++) {
			var y = artboard.verticalRulerData().guideAtIndex(0);
			artboard.verticalRulerData().removeGuideAtIndex(0);
			yValues.push(y - y1);
		}
		for (var i=0; i<yValues.length; i++) {
			artboard.verticalRulerData().addGuideWithValue(yValues[i]);
		}
	}
}

else if (selection != null && selection.count() > 0 && selection[0].className() == "MSSliceLayer") {}

else {
	doc.showMessage("Select 2 or more objects, one at the desired size.");
	}


// NOTES
// Thanks to Jeff Biggus (HyperJeff, Inc.) for help with modifier keys!

// This script is not to be distributed, shared, modified, etc. without written permission of the author. (See copyright notice above.)
// The script is provided “as is", to be used at your own risk, with no warranties of any kind, whether expressed or implied. Under no circumstances shall the author be liable for direct, indirect, special, incidental, or consequential damages resulting from the use, misuse, or inability to use this script.

// ---------------------------------------------------------------